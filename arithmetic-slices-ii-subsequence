#include <vector>
#include <unordered_map>

#define ll long long int

class Solution {
public:
    int numberOfArithmeticSlices(std::vector<int>& nums) {
        int n = nums.size();
        
        // dp vector to store the count of arithmetic slices for each index and difference
        std::vector<std::unordered_map<ll, ll>> dp(n);
        
        ll ans = 0; // variable to store the final count of arithmetic slices
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < i; j++) {
                ll diff = static_cast<ll>(nums[i]) - static_cast<ll>(nums[j]);
                
                // Check if there is a subarray with the same difference in the previous index
                if (dp[j].find(diff) != dp[j].end()) {
                    // Found the element, add its count to the final answer
                    ans += dp[j][diff];
                }
                
                // Update the count of arithmetic slices for the current index and difference
                dp[i][diff] += dp[j][diff] + 1;
            }
        }
        
        return static_cast<int>(ans);
    }
};
