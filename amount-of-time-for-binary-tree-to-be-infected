/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Function to convert a binary tree to an undirected graph
    void treeToGraph(TreeNode* root, std::unordered_map<int, std::vector<int>>& graph) {
        if (root == nullptr)
            return;

        if (root->left != nullptr) {
            // Add edges for the left child
            graph[root->val].push_back(root->left->val);
            graph[root->left->val].push_back(root->val);
            // Recursively convert the left subtree to a graph
            treeToGraph(root->left, graph);
        }

        if (root->right != nullptr) {
            // Add edges for the right child
            graph[root->val].push_back(root->right->val);
            graph[root->right->val].push_back(root->val);
            // Recursively convert the right subtree to a graph
            treeToGraph(root->right, graph);
        }
    }

    // Depth-first search to calculate the maximum distance from a node
    int dfs(int node, std::unordered_map<int, std::vector<int>>& graph, std::vector<bool>& visited) {
        visited[node] = true;
        int maxDistance = 0;

        for (auto& child : graph[node]) {
            if (!visited[child]) {
                int distance = dfs(child, graph, visited);
                maxDistance = std::max(maxDistance, distance);
            }
        }

        return maxDistance + 1;
    }

    // Main function to calculate the amount of time needed
    int amountOfTime(TreeNode* root, int start) {
        std::unordered_map<int, std::vector<int>> graph;
        // Convert the binary tree to an undirected graph
        treeToGraph(root, graph);

        // Initialize visited array
        std::vector<bool> visited(1e5 + 1, false);

        // Perform DFS to find the maximum distance from the starting node
        return dfs(start, graph, visited) - 1;
    }
};
