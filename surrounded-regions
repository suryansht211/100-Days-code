#include <vector>
#include <map>

class Solution {
public:
    int dr[4] = {-1, 0, 1, 0};
    int dc[4] = {0, 1, 0, -1};

    bool isValid(int r, int c, const std::vector<std::vector<char>> &grid) {
        return r >= 0 && r < static_cast<int>(grid.size()) &&
               c >= 0 && c < static_cast<int>(grid[0].size());
    }

    bool isBoundary(int r, int c, const std::vector<std::vector<char>> &board) {
        return r == 0 || r == static_cast<int>(board.size()) - 1 ||
               c == 0 || c == static_cast<int>(board[0].size()) - 1;
    }

    void DFS(std::pair<int, int> node, std::vector<std::vector<char>> &board,
             std::map<std::pair<int, int>, int> &vis) {
        vis[node] = 2;
        int p1 = node.first;
        int p2 = node.second;

        for (int i = 0; i < 4; ++i) {
            int t1 = p1 + dr[i];
            int t2 = p2 + dc[i];
            if (isValid(t1, t2, board) && board[t1][t2] == 'O' && vis[{t1, t2}] == 0) {
                DFS({t1, t2}, board, vis);
            }
        }
    }

    void solve(std::vector<std::vector<char>> &board) {
        std::map<std::pair<int, int>, int> vis;

        for (int i = 0; i < static_cast<int>(board.size()); ++i) {
            for (int j = 0; j < static_cast<int>(board[i].size()); ++j) {
                if (board[i][j] == 'O' && vis[{i, j}] == 0) {
                    if (isBoundary(i, j, board)) {
                        DFS({i, j}, board, vis);
                    }
                }
            }
        }

        for (int i = 0; i < static_cast<int>(board.size()); ++i) {
            for (int j = 0; j < static_cast<int>(board[i].size()); ++j) {
                if (board[i][j] == 'O' && vis[{i, j}] != 2) {
                    board[i][j] = 'X';
                }
            }
        }
    }
};
