#pragma GCC optimize("O3")
#pragma GCC optimize("Ofast", "inline", "ffast-math", "unroll-loops", "no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native", "f16c")

// Lambda function for fast input/output setup
static const auto DPSolver = []() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    return 'c';
}();

class Solution {
public:
    // Function to check if it is possible to make all strings equal
    bool makeEqual(vector<string> &words) {
        // Initialize a map to count occurrences of each character
        map<char, int> charCountMap;

        // Iterate through each word in the vector
        for (const string& word : words) {
            // Count occurrences of each character in the word
            for (char c : word) {
                charCountMap[c]++;
            }
        }

        // Get the total number of words in the vector
        int wordCount = words.size();

        // Check if the count of each character is divisible by the total number of words
        for (const auto& item : charCountMap) {
            if (item.second % wordCount != 0) {
                // If not divisible, it's not possible to make all strings equal
                return false;
            }
        }

        // All characters can be rearranged to make all strings equal
        return true;
    }
};
