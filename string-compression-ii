class Solution {
public:
    int getLengthOfOptimalCompression(string s, int k) {
        int n = s.size();
        int m = k;

        // Initialize a dynamic programming table
        int dp[110][110] = {};

        // Iterate through the string and removals
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j <= i && j <= m; ++j) {
                int need_remove = 0;
                int group_count = 0;

                // Initialize the current DP value to a large integer
                dp[i][j] = INT_MAX;

                // Case: Removing a character
                if (j) {
                    dp[i][j] = dp[i - 1][j - 1];
                }

                // Iterate over possible previous positions
                for (int prev = i; prev >= 1; --prev) {
                    // Update counts based on character matches
                    if (s[prev - 1] != s[i - 1]) {
                        need_remove += 1;
                    } else {
                        group_count += 1;
                    }

                    // Break if removals exceed the limit
                    if (need_remove > j) {
                        break;
                    }

                    // Update DP based on group counts
                    if (group_count == 1) {
                        dp[i][j] = min(dp[i][j], dp[prev - 1][j - need_remove] + 1);
                    } else if (group_count < 10) {
                        dp[i][j] = min(dp[i][j], dp[prev - 1][j - need_remove] + 2);
                    } else if (group_count < 100) {
                        dp[i][j] = min(dp[i][j], dp[prev - 1][j - need_remove] + 3);
                    } else {
                        dp[i][j] = min(dp[i][j], dp[prev - 1][j - need_remove] + 4);
                    }
                }
            }
        }

        // Return the optimal length
        return dp[n][m];
    }
};
