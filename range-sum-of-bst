/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // sum will store the sum of values of all nodes with a value
    // in the inclusive range [low, high].
    int sum = 0;

    // Function to calculate the sum of values of nodes in the BST
    // within the inclusive range [low, high].
    int rangeSumBST(TreeNode* root, int low, int high) {
        // Base Case: If the root is null, return 0.
        if(root == nullptr){
            return 0;
        }

        // Check if the value of the root lies in the inclusive
        // range [low, high]. If yes, add it to the sum.
        if(root->val >= low && root->val <= high){
            sum += root->val;
        }

        // Recursively call the function for the left and right branches.
        rangeSumBST(root->left, low, high);
        rangeSumBST(root->right, low, high);
        
        // Return the accumulated sum.
        return sum;
    }
};
