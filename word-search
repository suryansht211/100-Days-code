#include <vector>
#include <string>

class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size();
        int n = board[0].size();

        vector<vector<int>> vis(m, vector<int>(n, 0));

        bool ans = false;
        string str;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word[0]) {
                    str = board[i][j];
                    ans = solve(i, j, 0, n, m, str, word, board, vis);

                    if (ans)
                        return ans;
                }
            }
        }

        return false;
    }

private:
    bool solve(int i, int j, int k, int n, int m, string str, string word, vector<vector<char>>& board, vector<vector<int>>& vis) {
        if (str.size() == word.size())
            return true;

        bool top = false, bottom = false, left = false, right = false;

        vis[i][j] = 1;

        if (j - 1 >= 0 && k + 1 < word.size() && vis[i][j - 1] != 1 && board[i][j - 1] == word[k + 1]) {
            vis[i][j - 1] = 1;
            left = solve(i, j - 1, k + 1, n, m, str + board[i][j - 1], word, board, vis);
            vis[i][j - 1] = 0;
        }

        if (j + 1 < n && k + 1 < word.size() && vis[i][j + 1] != 1 && board[i][j + 1] == word[k + 1]) {
            vis[i][j + 1] = 1;
            right = solve(i, j + 1, k + 1, n, m, str + board[i][j + 1], word, board, vis);
            vis[i][j + 1] = 0;
        }

        if (i - 1 >= 0 && k + 1 < word.size() && vis[i - 1][j] != 1 && board[i - 1][j] == word[k + 1]) {
            vis[i - 1][j] = 1;
            top = solve(i - 1, j, k + 1, n, m, str + board[i - 1][j], word, board, vis);
            vis[i - 1][j] = 0;
        }

        if (i + 1 < m && k + 1 < word.size() && vis[i + 1][j] != 1 && board[i + 1][j] == word[k + 1]) {
            vis[i + 1][j] = 1;
            bottom = solve(i + 1, j, k + 1, n, m, str + board[i + 1][j], word, board, vis);
            vis[i + 1][j] = 0;
        }

        vis[i][j] = 0;

        return (top || bottom || left || right);
    }
};
