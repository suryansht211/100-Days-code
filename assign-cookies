#include <vector>
#include <queue>

class Solution {
public:
    int findContentChildren(std::vector<int>& childrenAppetite, std::vector<int>& cookieSizes) {
        int numChildren = childrenAppetite.size();
        int numCookies = cookieSizes.size();
        int satisfiedChildrenCount = 0;
        int childIndex = 0;

        // Priority queue for children's appetite and cookie sizes
        std::priority_queue<int> childrenAppetiteQueue(childrenAppetite.begin(), childrenAppetite.end());
        std::priority_queue<int> cookieSizesQueue(cookieSizes.begin(), cookieSizes.end());

        while (childIndex < numChildren) {
            if (childrenAppetiteQueue.empty() || cookieSizesQueue.empty()) {
                break;
            } else if (childrenAppetiteQueue.top() <= cookieSizesQueue.top()) {
                satisfiedChildrenCount++;
                childrenAppetiteQueue.pop();
                cookieSizesQueue.pop();
            } else if (childrenAppetiteQueue.top() > cookieSizesQueue.top()) {
                childrenAppetiteQueue.pop();
            }

            childIndex++;
        }

        return satisfiedChildrenCount;
    }
};
