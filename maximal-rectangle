#include <vector>
#include <stack>
#include <algorithm>

class Solution {
public:
    void NSR(const std::vector<int>& heights, std::vector<int>& ans) {
        int n = heights.size();
        std::stack<std::pair<int, int>> st;

        for (int i = n - 1; i >= 0; i--) {
            if (st.empty())
                ans.push_back(n);
            else if (st.top().first < heights[i])
                ans.push_back(st.top().second);
            else {
                while (!st.empty() && st.top().first >= heights[i])
                    st.pop();
                ans.push_back(st.empty() ? n : st.top().second);
            }
            st.push({heights[i], i});
        }

        std::reverse(ans.begin(), ans.end());
    }

    void NSL(const std::vector<int>& heights, std::vector<int>& ans) {
        int n = heights.size();
        std::stack<std::pair<int, int>> st;

        for (int i = 0; i < n; i++) {
            if (st.empty())
                ans.push_back(-1);
            else if (st.top().first < heights[i])
                ans.push_back(st.top().second);
            else {
                while (!st.empty() && st.top().first >= heights[i])
                    st.pop();
                ans.push_back(st.empty() ? -1 : st.top().second);
            }
            st.push({heights[i], i});
        }
    }

    int MAH(const std::vector<int>& heights) {
        std::vector<int> nsrvec, nslvec;
        NSR(heights, nsrvec);
        NSL(heights, nslvec);
        int n = nsrvec.size();
        std::vector<int> widtharr(n);

        for (int i = 0; i < n; i++)
            widtharr[i] = (nsrvec[i] - nslvec[i] - 1) * heights[i];

        return *std::max_element(widtharr.begin(), widtharr.end());
    }

    int maximalRectangle(const std::vector<std::vector<char>>& matrix) {
        int N = matrix.size();
        int M = matrix[0].size();
        std::vector<int> vec;

        for (int j = 0; j < M; j++)
            vec.push_back((matrix[0][j] == '0') ? 0 : 1);

        int maxi = MAH(vec);

        for (int i = 1; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (matrix[i][j] == '0')
                    vec[j] = 0;
                else
                    vec[j] = vec[j] + 1;
            }
            maxi = std::max(maxi, MAH(vec));
        }

        return maxi;
    }
};
